{"version":3,"sources":["utils/grid.ts","utils/ui.tsx","CellsCount.tsx","ColorPicker.tsx","Grid.tsx","GridSize.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["generateGrid","n","Array","from","length","Math","round","random","generateRow","getBoundedCells","grid","x0","y0","stack","result","tryToPushCell","p","xx","yy","find","x","y","checkCell","push","cur","pop","Row","styled","div","Cell","SliderWidget","props","className","label","value","type","onChange","e","parseInt","target","step","min","max","CellsCount","cellsCount","ColorPickerItem","color","onClick","mainColor","ColorPicker","colors","map","GridCell","onMouseEnter","onHover","emptyFunc","onMouseLeave","undefined","_","children","cellSize","size","hovered","hoveredColor","filled","Grid","useState","setHovered","lastClicked","setLastClicked","cellText","setCellText","boundedOnHover","useMemo","filledGrid","boundedRegion","row","cell","forEach","getFilledGrid","onCellClick","useEffect","text","toString","isClickedCell","GridSize","COLORS","setCellsCount","gridSize","setGridSize","setColor","ceil","calculateCellSize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.a157a904.chunk.js","sourcesContent":["import { Pair, ZOGrid, ZORow } from './types';\r\n\r\nexport const emptyFunc = () => {\r\n};\r\nexport const generateRow = (n: number): ZORow => Array.from({ length: n }, () => Math.round(Math.random())) as ZORow;\r\nexport const generateGrid = (n: number) => Array.from({ length: n }, () => generateRow(n));\r\n\r\nexport const calculateCellSize = (gridSize: number, cellsCount: number): number => Math.ceil(gridSize / cellsCount);\r\n\r\n\r\nexport const getBoundedCells = (grid: ZOGrid, x0: number, y0: number) => {\r\n  const stack: Pair[] = [];\r\n  const result: Pair[] = [];\r\n\r\n  const checkCell = (p: Pair) => {\r\n    const [xx, yy] = p;\r\n    if (xx < 0 || yy < 0 || xx >= grid.length || yy >= grid.length) {\r\n      return false;\r\n    }\r\n    if (result.find(([x, y]) => xx === x && yy === y)) {\r\n      return false;\r\n    }\r\n    return grid[yy][xx] !== 0;\r\n\r\n  };\r\n\r\n  const tryToPushCell = (p: Pair) => {\r\n    if (checkCell(p)) {\r\n      stack.push(p);\r\n    }\r\n  };\r\n\r\n  if (grid[y0][x0] === 1) {\r\n    stack.push([x0, y0]);\r\n    while (stack.length > 0) {\r\n      const cur = stack.pop();\r\n      if (cur) {\r\n        const [x, y] = cur;\r\n        result.push(cur);\r\n        tryToPushCell([x - 1, y]); // leftCell\r\n        tryToPushCell([x + 1, y]); // rightCell\r\n        tryToPushCell([x, y - 1]); // topCell\r\n        tryToPushCell([x, y + 1]); // botCell\r\n      }\r\n    }\r\n  }\r\n  return result;\r\n};\r\n","import styled from 'styled-components';\r\nimport React from 'react';\r\nimport { NumberChangeCallback, StyledComponentProps } from './types';\r\n\r\nexport const Row = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Cell = styled.div`\r\n  display: inline-block;\r\n  margin-right: 10px;\r\n`;\r\n\r\nexport interface SliderWidgetProps {\r\n  min: number;\r\n  max: number;\r\n  step: number;\r\n  value: number;\r\n  onChange: NumberChangeCallback;\r\n  label: string;\r\n}\r\n\r\nconst RawSliderWidget = (props: SliderWidgetProps & StyledComponentProps) => {\r\n  return <div className={ props.className }>\r\n    <div>{ props.label }: { props.value }</div>\r\n    <div>\r\n      <input type={ 'range' }\r\n             value={ props.value }\r\n             onChange={ e => props.onChange(parseInt(e.target.value)) }\r\n             step={ props.step }\r\n             min={ props.min }\r\n             max={ props.max }/>\r\n    </div>\r\n  </div>;\r\n};\r\n\r\nexport const SliderWidget = styled(RawSliderWidget)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 10px;\r\n`;\r\n","import React from 'react';\r\nimport { NumberChangeCallback } from './utils/types';\r\nimport { SliderWidget } from './utils/ui';\r\n\r\nexport interface CellsCountProps {\r\n  cellsCount: number;\r\n  onChange: NumberChangeCallback;\r\n}\r\n\r\nexport const CellsCount = ({ cellsCount, onChange }: CellsCountProps) => {\r\n  return <SliderWidget onChange={ onChange } min={ 2 } max={ 20 } step={ 1 } value={ cellsCount } label={ 'Size' }/>;\r\n};\r\n","import styled from 'styled-components';\r\nimport React from 'react';\r\nimport { StyledComponentProps } from './utils/types';\r\n\r\ntype ColorPickerCallback = (color: Color) => void;\r\n\r\nexport interface Color {\r\n  mainColor: string;\r\n  hoveredColor: string;\r\n}\r\n\r\nexport interface ColorPickerItemProps {\r\n  color: Color;\r\n  onClick: ColorPickerCallback;\r\n}\r\n\r\nconst RawColorPickerItem = ({ color, onClick, className }: ColorPickerItemProps & StyledComponentProps) => {\r\n  return <div className={ className } onClick={ e => onClick(color) }/>;\r\n};\r\n\r\nexport const ColorPickerItem = styled(RawColorPickerItem)`\r\n  width: 16px;\r\n  height: 16px;\r\n  display: inline-block;\r\n  background: ${ props => props.color.mainColor };\r\n`;\r\n\r\nexport interface ColorPickerProps {\r\n  colors: Color[];\r\n  value: Color;\r\n  onChange: ColorPickerCallback;\r\n}\r\n\r\nconst RawColorPicker = ({ className, colors, onChange }: ColorPickerProps & StyledComponentProps) => {\r\n  return <div className={ className }>\r\n    { colors.map(color => <ColorPickerItem color={ color } onClick={ onChange }/>) }\r\n  </div>;\r\n};\r\n\r\nexport const ColorPicker = styled(RawColorPicker)`\r\n  display: flex;\r\n  width: 64px;\r\n  flex-wrap: wrap;\r\n`;\r\n","import React, { PropsWithChildren, useEffect, useMemo, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Row } from './utils/ui';\r\nimport { Pair, StyledComponentProps, ZOGrid } from './utils/types';\r\nimport { emptyFunc, getBoundedCells } from './utils/grid';\r\nimport { Color } from './ColorPicker';\r\n\r\nexport interface CellValue {\r\n  filled: boolean;\r\n  hovered?: boolean;\r\n}\r\n\r\nexport interface CellProps {\r\n  x: number;\r\n  y: number;\r\n  value: CellValue;\r\n  size: number;\r\n  color: Color;\r\n  hovered?: boolean;\r\n  onHover?: (coords?: Pair) => void;\r\n  onClick: (coords: Pair) => void;\r\n}\r\n\r\nconst RawGridCell = (props: PropsWithChildren<CellProps & StyledComponentProps>) => {\r\n  const onEnter = (e: unknown) => props.onHover ? props.onHover([props.x, props.y]) : emptyFunc();\r\n  const onLeave = (e: unknown) => props.onHover ? props.onHover(undefined) : emptyFunc();\r\n\r\n  return <div className={ props.className } onMouseEnter={ onEnter } onMouseLeave={ onLeave }\r\n              onClick={ _ => props.onClick([props.x, props.y]) }>{ props.children }</div>;\r\n};\r\n\r\nconst getFontSize = (cellSize: number) => {\r\n  if (cellSize < 15) {\r\n    return '0.6em';\r\n  }\r\n  if (cellSize < 20) {\r\n    return '0.7em';\r\n  }\r\n  if (cellSize < 25) {\r\n    return '0.8em';\r\n  }\r\n  return '1em';\r\n}\r\n\r\nexport const GridCell = styled(RawGridCell)`\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: ${ props => getFontSize(props.size) };\r\n  font-weight: bold;\r\n  color: #111;\r\n  border: 1px solid rgba(0, 0, 0, 0.2);\r\n  width: ${ props => props.size }px;\r\n  height: ${ props => props.size }px;\r\n  background: ${ props => props.value.hovered\r\n  ? props.color.hoveredColor\r\n  : (props.value.filled\r\n    ? props.color.mainColor\r\n    : 'white') };\r\n`;\r\n\r\nexport interface GridProps {\r\n  grid: ZOGrid;\r\n  color: Color;\r\n  cellSize: number;\r\n}\r\n\r\nconst getFilledGrid = (grid: ZOGrid, boundedRegion: Pair[]): CellValue[][] => {\r\n  const result: CellValue[][] = grid.map(row => row.map(cell => ({\r\n    filled: cell === 1,\r\n  })));\r\n  boundedRegion.forEach(([x, y]) => {\r\n    result[y][x].hovered = true;\r\n  });\r\n  return result;\r\n};\r\n\r\nconst RawGrid = ({ cellSize, className, color, grid }: GridProps & StyledComponentProps) => {\r\n  const [hovered, setHovered] = useState<Pair | undefined>();\r\n  const [lastClicked, setLastClicked] = useState<Pair | undefined>();\r\n  const [cellText, setCellText] = useState('');\r\n\r\n  const boundedOnHover = useMemo(() => hovered ? getBoundedCells(grid, hovered[0], hovered[1]) : [], [hovered, grid]);\r\n  const filledGrid = useMemo(() => getFilledGrid(grid, boundedOnHover), [boundedOnHover, grid]);\r\n\r\n  const onCellClick = (p: Pair) => {\r\n    setCellText('');\r\n    setLastClicked(p);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!lastClicked) {\r\n      return;\r\n    }\r\n    const [x, y] = lastClicked;\r\n    if (grid[y][x] === 1) {\r\n      const b = getBoundedCells(grid, x, y);\r\n      const text = b.length.toString();\r\n      setCellText(text);\r\n    }\r\n  }, [lastClicked, grid]);\r\n\r\n  useEffect(() => {\r\n    setLastClicked(undefined);\r\n  }, [grid]);\r\n\r\n  const isClickedCell = ([x, y]: Pair) => lastClicked ? (lastClicked[0] === x && lastClicked[1] === y) : false;\r\n\r\n  const renderRow = (row: CellValue[], y: number) => <Row>\r\n    { row.map((cell, x) => (\r\n      <GridCell x={ x } y={ y } size={ cellSize } value={ cell }\r\n                onHover={ setHovered }\r\n                onClick={ onCellClick }\r\n                color={ color }>{ isClickedCell([x, y]) ? cellText : '' }</GridCell>))\r\n    }\r\n  </Row>;\r\n\r\n  return <div className={ className }>\r\n    { filledGrid.map(renderRow) }\r\n  </div>;\r\n};\r\n\r\nexport const Grid = styled(RawGrid)`\r\n`;\r\n","import React from 'react';\r\nimport { NumberChangeCallback } from './utils/types';\r\nimport { SliderWidget } from './utils/ui';\r\n\r\nexport interface GridSizeProps {\r\n  onChange: NumberChangeCallback;\r\n  value: number;\r\n}\r\n\r\nexport const GridSize = ({ onChange, value }: GridSizeProps) => {\r\n  return <SliderWidget onChange={ onChange } value={ value } min={ 200 } max={ 800 } step={ 20 }\r\n                       label={ 'Grid size' }/>;\r\n};\r\n","import React, { useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport { calculateCellSize, generateGrid } from './utils/grid';\nimport { CellsCount } from './CellsCount';\nimport { Color, ColorPicker } from './ColorPicker';\nimport { Grid } from './Grid';\nimport { GridSize } from './GridSize';\nimport { Cell, Row } from './utils/ui';\n\nconst COLORS: Color[] = [\n  { mainColor: '#bca9e1', hoveredColor: '#8f74c4' },\n  { mainColor: '#98a7f2', hoveredColor: '#4457b6' },\n  { mainColor: '#a4c5ea', hoveredColor: '#5998e0' },\n  { mainColor: '#9de19a', hoveredColor: '#63bb60' },\n  { mainColor: '#e1e87c', hoveredColor: '#b1b66d' },\n  { mainColor: '#eab625', hoveredColor: '#9d7f20' },\n  { mainColor: '#ee845d', hoveredColor: '#d26841' },\n  { mainColor: '#f6546a', hoveredColor: '#cb4b5c' },\n];\n\n/// App\nfunction RawApp(props: { className?: string; }) {\n  const [cellsCount, setCellsCount] = useState(12);\n  const [gridSize, setGridSize] = useState(420);\n  const [color, setColor] = useState(COLORS[0]);\n\n  const size = useMemo(() => calculateCellSize(gridSize, cellsCount), [gridSize, cellsCount]);\n  const grid = useMemo(() => generateGrid(cellsCount), [cellsCount]);\n\n  const colors = useMemo(() => COLORS, []);\n\n  return (\n    <div className={ props.className }>\n      <Row>\n        <Cell>\n          <GridSize value={ gridSize } onChange={ setGridSize }/>\n        </Cell>\n        <Cell>\n          <CellsCount cellsCount={ cellsCount } onChange={ setCellsCount }/>\n        </Cell>\n        <Cell>\n          <ColorPicker colors={ colors } onChange={ setColor } value={ color }/>\n        </Cell>\n      </Row>\n      <Grid grid={ grid } cellSize={ size } color={ color }/>\n    </div>\n  );\n}\n\nexport default styled(RawApp)`\n  margin: 30px;\n`;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}